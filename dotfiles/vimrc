syntax enable
filetype plugin indent on

set tabstop=2
set shiftwidth=2
set colorcolumn=81

runtime macros/matchit.vim

set showcmd
set showmode

set backspace=indent,eol,start

set hidden

set wildmenu
set wildmode=list:longest

set ignorecase
set smartcase

set number
set ruler

map <S-Enter> O<Esc>
map <CR> o<Esc>
map <Leader>o o<Esc>ko
map <C-j> k$J
map <C-a> ggVG

map <Leader>f :Flisttoggle<Enter>

" Indent Style Function
fu! SetIndentStyle(width, soft)
  let width=a:width * 1
	if a:soft == "true"
		set expandtab
		execute 'set shiftwidth='.width
		execute 'set softtabstop='.width
	else
		set noexpandtab
		execute 'set tabstop='.width
		execute 'set shiftwidth='.width
	endif
endfunction

com! -nargs=* Istyle call SetIndentStyle(<f-args>)
call SetIndentStyle(2, 'true')

fu! WhenFileIs(type, command)
	execute 'autocmd BufNewFile,BufRead *.'.a:type.' '.a:command
endfunction

fu! MapFT(extension, language)
	call WhenFileIs(a:extension, 'set ft='.a:language)
endfunction

call MapFT('json', 'javascript')
call MapFT('master', 'html')
call MapFT('config', 'xml')
call MapFT('vb', 'vbnet')
call MapFT('aspx', 'html')

call WhenFileIs('styl', 'setlocal nosmartindent')

colorscheme Tomorrow-Night

" FuzzyFinder Settings
map <Leader>t :FufCoverageFile<Enter>
map <Leader>b :FufBuffer<Enter>
let g:fuf_file_exclude = '\v\~$|\.(o|exe|dll|bak|orig|sw[po]|pyc)$|(^|[/\\])\.(hg|git|bzr)($|[/\\])|.*/tiny_mce.?/.*|.*template_c.*|node_modules'
let g:fuf_dir_exclude = '\v(^|[/\\])\.(hg|git|bzr)($|[/\\])|node_modules'
let g:fuf_coveragefile_exclude = '\v\~$|\.(o|exe|dll|bak|orig|sw[po]|pyc)$|(^|[/\\])\.(hg|git|bzr)($|[/\\])|.*/tiny_mce.?/.*|.*template_c.*|node_modules'

map <Leader>e :NERDTree<Enter>
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif

call pathogen#infect()
